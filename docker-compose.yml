version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: finance_tracker_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finance_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-finance_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finance_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - finance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finance_tracker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finance_tracker_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-finance_user}:${POSTGRES_PASSWORD:-finance_password}@db:5432/${POSTGRES_DB:-finance_tracker}
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ml_models:/app/ml_models/trained_models
      - uploads:/app/uploads
    networks:
      - finance_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: finance_tracker_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - finance_network
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_BASE_URL=http://backend:5000/api

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: finance_tracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - finance_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # ML Model Training Service (Optional)
  ml_trainer:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
    container_name: finance_tracker_ml
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-finance_user}:${POSTGRES_PASSWORD:-finance_password}@db:5432/${POSTGRES_DB:-finance_tracker}
      - MODEL_PATH=/app/ml_models/trained_models
    volumes:
      - ./backend:/app
      - ml_models:/app/ml_models/trained_models
    networks:
      - finance_network
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    profiles:
      - ml-training

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: finance_tracker_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - finance_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: finance_tracker_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - finance_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  finance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16